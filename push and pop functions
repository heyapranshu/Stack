#include <stdio.h>
#include <stdlib.h>

//creating a stack structure

struct stack
{
    int size;
    int top;
    int *arr;
};

// creating fucntion to check stack is full or empty

int isempty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int isfull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
       return 1;
    }
    else
    {
        return 0;
    }
}

// creating push functions 

void push(struct stack* ptr,int val){
    if(isfull(ptr)){
        printf("stack is overflow\n");
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top]=val;
    }
}

// creating pop functions 

int pop(struct stack* ptr){
    if (isempty(ptr))
    {
        printf("stack is underflow\n");
    }
    else{
        int new = ptr->arr[ptr->top];
        ptr->top--;
        return new;
        }
}

int main()
{
    struct stack *sp = (struct stack *)malloc(sizeof(struct stack));
    sp->size = 10;
    sp->top = -1;
    sp->arr = (int *)malloc(sp->size * sizeof(int));
    printf("stack is created\n");
    printf("before pushing %d\n",isempty(sp));
    printf("before pushing %d\n",isfull(sp));
    push(sp,89);
    push(sp,79);
    push(sp,9);
    push(sp,79);
    push(sp,59);
    push(sp,69);
    push(sp,29);
    push(sp,39);
    push(sp,39);
    push(sp,59); // --> pushed upto top 
    push(sp,39); // Overflow will not be added
    printf("After pushing %d\n",isempty(sp));
    printf("After pushing %d\n",isfull(sp));
    printf("%d\n",isempty(sp));
    printf("%d\n",isfull(sp));

    printf("%d is poped",pop(sp));//  --> last in first out

    return 0;
}
